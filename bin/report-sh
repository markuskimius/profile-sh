#!/usr/bin/env bash

##############################################################################
# PROFILE-SH: BASH script profiling tools
# https://github.com/markuskimius/profile-sh
#
# Copyright (c)2021 Mark Kim
# Released under GNU General Public License version 2.
# https://github.com/markuskimius/profile-sh/blob/main/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Generate a report from the profile output generated by record-sh.

Usage: ${SCRIPTNAME} [OPTIONS] PROFILE.OUT


EXAMPLE:
  $ report-sh ./profile.out
      1239|./fibonacci.sh|
       113|./fibonacci.sh|main main
      2743|./fibonacci.sh|main main fib
      2655|./fibonacci.sh|main main fib fib
      5244|./fibonacci.sh|main main fib fib fib
      9831|./fibonacci.sh|main main fib fib fib fib
     22597|./fibonacci.sh|main main fib fib fib fib fib
     36948|./fibonacci.sh|main main fib fib fib fib fib fib
     40756|./fibonacci.sh|main main fib fib fib fib fib fib fib
     19147|./fibonacci.sh|main main fib fib fib fib fib fib fib fib
      3980|./fibonacci.sh|main main fib fib fib fib fib fib fib fib fib
       143|./fibonacci.sh|main main fib fib fib fib fib fib fib fib fib fib
  $

  The first column is the number of microseconds spent in the stackframe.  The
  second column is the name of the script of the stackframe.  The third column
  is the stackframe within the script.

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

source "logger.sh" || exit 1


SCRIPTNAME=$(basename -- "$BASH_SOURCE")


function main() {
    local OPTIND OPTERR OPTARG opt
    local file
    local isok=1

    # Check arguments
    while getopts "o:" opt; do
        case "$opt" in
            o)  OUTPUT=$OPTARG ;;
            *)  logger FAIL "${opt}: Invalid command"
                isok=0         ;;
        esac
    done
    shift $((OPTIND-1))

    # Sanity check
    if (( ! isok )); then
        usage 1>&2
        exit 1
    fi

    # Fold each file
    for file in "$@"; do
        cat "$file" | stackfold-sh | flamegraph-sh
    done
}


function stackfold-sh() {
    local file=$1
    local lead magic script stack lineno rest
    local last_script last_stack last_us=0

    while IFS=\| read -r lead magic script stack lineno rest; do
        [[ "$magic" != "__PROFILE__" ]] && continue

        local timestamp=${lead%% *}
        local seconds=${timestamp%.*}
        local subseconds="${timestamp#*.}000000"
        local microseconds=${seconds}${subseconds:0:6}
        local us_spent=$(( microseconds - last_us ))
        local filedepth=${lead#* }

        # Print the last stack
        if (( last_us )); then
            printf "%s|%s|%s\n" "$us_spent" "$last_script" "$last_stack"
        fi

        # Update for the next iteration
        last_us=$microseconds
        last_stack=$stack
        last_script=$script
    done
}


function flamegraph-sh() {
    local file=$1
    local us script stack
    local -A profile=()
    local index

    # Collate
    while IFS=\| read -r us script stack; do
        stack=$(invert $stack)

        if [[ -z "${profile[${script}|${stack}]}" ]]; then
            profile[${script}|${stack}]=0
        fi

        (( profile[${script}|${stack}] = ${profile[${script}|${stack}]-0} + us ))
    done

    # Summary
    while IFS=\| read -r script stack; do
        printf "%8s|%s|%s\n" "${profile[${script}|${stack}]}" "${script}" "$stack"
    done < <(printf "%s\n" "${!profile[@]}" | sort)
}


function invert() {
    local list=( "$@" )
    local inverted=()
    local i

    for (( i=${#list[@]}; i > 0; i-- )); do
        inverted+=( "${list[i-1]}" )
    done

    printf "%s\n" "${inverted[*]}"
}


##############################################################################
# ENTRY POINT

main "$@"
